// Exemple d'utilisation de la librarie RGBmatrixPanel

#include <MOMO_RGB_Matrix.h>

 MOMO_RGB_Matrix matrix;

#define LD1R 2  // ALIAS DES LED ET DES BOUTON
#define LD1G 1
#define LD1B 0
#define LD2R 7
#define LD2G 6
#define LD2B 5
#define LD3R 4
#define LD3G 3
#define LD3B 2
#define BTNUP 2
#define BTNDOWN 7
#define BTNLEFT 1
#define BTNRIGTH 3
#define BTNA 6
#define BTNB 4
#define BTNC 5
#define CHAN11 5
#define CHAN2 3
#define SW1 5
int VitesseDeJeu = 250;
volatile int SensEncodeur = -1;
unsigned long dernierDeplacement = 0;
volatile int StartEncodeur = 0;

//struct pour representer un segment serpent
struct Segment {
  int x; //position hori
  int y; //position ver
};

#define Max_Taille 256 //taille max serpent

Segment snake[Max_Taille];//declare tableau max taille
int longeur = 5; // longeur start
int nourritureX = 10;//position nourriture 
int nourritureY = 10;

//enumeration des direction
enum Direction { Haut,
                 Bas,
                 Gauche,
                 Droite };
Direction direction = Haut; //direction du debut

//definition dea etat de jeu
enum class Gamestate {
  MainMenu,
  Parametre,
  Playing,
  Gameover,
  Exit // pas encore utiliser
};

void Machine_A_Etat();

enum CurrentState { Menu,
                    Parametre,
                    Playing,
                    GameOver
};
CurrentState currentState = Menu;
void Machine_A_Etat() {


  switch (currentState) {
    case Menu: //si on est dans le menu
      EtatMenu();//apppeler la fonction qui gere le menu
      break;
    case Parametre:
      EtatParametre();
      break;
    case Playing:
      EtatPlaying();
      break;
    case GameOver:
      EtatGameOver();
      break;
    default:
      break; // ne rien faire si aucune valeur valide (securite)
  }
}

void EtatMenu() {
  static int Selection = 0;//0 = play ,1 = setting
  static int DernSelection = 1;// sauvegarde l ancienne selection pour detec le changement
  static int DernEncodeur = 0;// derniere valeur lue de l encodeur
  static unsigned long DernierChangement = 0;// temp du dernier changement de selection
matrix.setTextSize(1);// taille texte
matrix.setTextWrap(false);// non retour de ligne

  matrix.setCursor(10, 0);
  matrix.setTextColor(matrix.Color888(255, 255, 255));
  matrix.print("Snake2.0");
  

matrix.setCursor(20, 12);
  matrix.setTextColor(matrix.Color888(0, 255,0));
  matrix.print("Play");

  matrix.setCursor(20, 22);
  matrix.setTextColor(matrix.Color888(0, 255, 255));
  matrix.print("Setting");
// si 150ms sont passer on lit encodeur pour changer selection
 if (millis() - DernierChangement > 150){
  if (StartEncodeur > DernEncodeur){
    Selection++;// tourner vers bas = suivant
      DernEncodeur = StartEncodeur;
      DernierChangement = millis();
  } else if(StartEncodeur < DernEncodeur){
    Selection--;// tourner vers le haut = precedent
    DernEncodeur = StartEncodeur;
    DernierChangement = millis();
  }
 }
//*IMPORTANT EMPECHE LA SELEECTION DE SORITR DE LA LIMITE
if (Selection < 0) Selection = 1;
if (Selection > 0) Selection = 0;
// SI LA SELECTION CHANGE DEPUIS LE DERNIER ETAT
if (DernSelection != Selection){
  if (DernSelection ==0){
    matrix.setCursor(5, 12);
    matrix.setTextColor(matrix.Color888(0, 0, 0));//EFFACE ANCIEN >
    matrix.print(">");
  }
  DernSelection = Selection;
}//AFFICHE LA FLECHE
if (Selection == 0) {
  matrix.setCursor(5, 12);
} else{
  matrix.setCursor(5, 22);
}
matrix.setTextColor(matrix.Color888(255, 0, 0));
matrix.print(">");

DernSelection = Selection;
// SI SW1 APPUYER ON VALIDE LA SELECTION
 if (lireSW1()){
  delay(150);//PAUSE POUR EVITER LE REBON
  if (Selection == 0){
    currentState = Playing;
  }else{
    currentState = Parametre;
  }
 }
}

void EtatPlaying() {


// DIRECTION DU SERPENT
  if (lireBTNUP() && direction != Bas) direction = Haut;//ALLER EN HAUT MAIS ENPECHE EN BAS
  if (lireBTNDOWN() && direction != Haut) direction = Bas;
  if (lireBTNLEFT() && direction != Droite) direction = Gauche;
  if (lireBTNRIGTH() && direction != Gauche) direction = Droite;
 // VERIFIE SI ASSEZ DE TEMPS ET PASSEER POUR DEPLACER LE SERPENT
  if (millis() - dernierDeplacement > VitesseDeJeu) {
    dernierDeplacement = millis();//MISE A JOUR DU TEMPS ET DERNIER DEPLACEMENT
      matrix.fillScreen(0);
    for (int i = longeur - 1; i > 0; i--) {//DEPLACE LE CORPS DU SERPENT PREND POSITION DE CELUI EN ARRIERE 
      snake[i] = snake[i - 1]; 
    }
    //DEPLACE LA TETE DU SERPENT SELON LA DIRECTION TAPER
    switch (direction) {
      case Haut: snake[0].y--; break;
      case Bas: snake[0].y++; break;
      case Gauche: snake[0].x--; break;
      case Droite: snake[0].x++; break;
    }
    //SI LA CORDONNER TETE SERPENT ET EGALE A CORDONNER NOURRITURE
        if (snake[0].x == nourritureX && snake[0].y == nourritureY){
      longeur++; //+ LONGEUR SNAKE
          nourritureX = random(1, 62);//NOUVELLE POSITION ALEATOIRE
          nourritureY = random(1, 30);
             if (longeur > Max_Taille) longeur = Max_Taille;//NE PAS DEPASSER TAILLE MAX
                  if(VitesseDeJeu > 50) VitesseDeJeu -=10;// AUGMENTER LA VITESSE

    }
    if (snake[0].x < 0 || snake[0].x >= 63 || snake[0].y <= 0 || snake[0].y >= 31) {
      currentState = GameOver;
      return;
    }
    for (int i = 0; i < longeur; i++) {
      matrix.drawPixel(snake[i].x, snake[i].y, matrix.Color888(0, 255, 0));
    }
 
     matrix.drawPixel(nourritureX, nourritureY, matrix.Color888(255, 0, 0));

    for (int x = 0; x < 64; x++) {
      matrix.drawPixel(x, 0, matrix.Color888(255, 0, 0));
      matrix.drawPixel(x, 31, matrix.Color888(255, 0, 0));
    }
    for (int y = 0; y < 32; y++) {
      matrix.drawPixel(0, y, matrix.Color888(255, 0, 0));
      matrix.drawPixel(63, y, matrix.Color888(255, 0, 0));
    }
  }
}
void EtatParametre() {
 
  matrix.setCursor(5, 1);
  matrix.setTextColor(matrix.Color888(255, 255, 0));
  matrix.print("Parametre");
}

void EtatGameOver() {
  matrix.setCursor(5, 5);
  matrix.setTextColor(matrix.Color888(255, 0, 0));
  matrix.print("GAME OVER");
  if (lireBTNC()) {
    matrix.fillScreen(0);
    resetGame();
    currentState = Menu;
    delay(200);
  }
}

void resetGame(){
 longeur = 5;
  VitesseDeJeu = 250;
 direction = Haut;
 snake[0].x = 64 / 2;
 snake[0].y = 32 / 2;
 for (int i = 0; i < longeur; i++) {
  snake[i].x = snake[0].x -i;
  snake[i].y = snake[0].y;
 }
 nourritureX = random(1,62);
 nourritureY = random(1,30);
}
void EncodeurInterruption() {
  if ((PINE & (1 << CHAN11)) == (PINE & (1 << CHAN2))){
    SensEncodeur = 1;
  } else {
    SensEncodeur = 0;
  }

}
void ctrlLD1R(unsigned char etat) {
  if (etat) {
    PORTG |= (1 << LD1R);
  } else {
    PORTG &= ~(1 << LD1R);
  }
}
void ctrlLD1B(unsigned char etat) {
  if (etat) {
    PORTG |= (1 << LD1B);
  } else {
    PORTG &= ~(1 << LD1B);
  }
}
void ctrlLD1G(unsigned char etat) {
  if (etat) {
    PORTG |= (1 << LD1G);
  } else {
    PORTG &= ~(1 << LD1G);
  }
}
void ctrlLD2R(unsigned char etat) {
  if (etat) {
    PORTL |= (1 << LD2R);
  } else {
    PORTL &= ~(1 << LD2R);
  }
}
void ctrlLD2B(unsigned char etat) {
  if (etat) {
    PORTL |= (1 << LD2B);
  } else {
    PORTL &= ~(1 << LD2B);
  }
}
void ctrlLD2G(unsigned char etat) {
  if (etat) {
    PORTL |= (1 << LD2G);
  } else {
    PORTL &= ~(1 << LD2G);
  }
}
void ctrlLD3R(unsigned char etat) {
  if (etat) {
    PORTL |= (1 << LD3R);
  } else {
    PORTL &= ~(1 << LD3R);
  }
}
void ctrlLD3B(unsigned char etat) {
  if (etat) {
    PORTL |= (1 << LD3B);
  } else {
    PORTL &= ~(1 << LD3B);
  }
}
void ctrlLD3G(unsigned char etat) {
  if (etat) {
    PORTL |= (1 << LD3G);
  } else {
    PORTL &= ~(1 << LD3G);
  }
}
unsigned char lireBTNUP() {
  return ((PINC & (1 << BTNUP)) == 0);
}
unsigned char lireBTNLEFT() {
  return ((PINC & (1 << BTNLEFT)) == 0);
}
unsigned char lireBTNDOWN() {
  return ((PINC & (1 << BTNDOWN)) == 0);
}
unsigned char lireBTNRIGTH() {
  return ((PINC & (1 << BTNRIGTH)) == 0);
}
unsigned char lireSW1() {
  return ((PING & (1 << SW1)) == 0);
}
unsigned char lireBTNC() {
  return ((PINC & (1 << BTNC)) == 0);
}

void setup() {
  matrix.begin();
  Serial.begin(9600);
  snake[0].x = 64 / 2;
  snake[0].y = 32 / 2;
  for (int i = 0; i < longeur; i++) {
    snake[i].x = snake[0].x - i;
    snake[i].y = snake[0].y;
  }
  randomSeed(analogRead(0));
  nourritureX = random(1, 62);
  nourritureY = random(1, 30);
  DDRE = 0XD7;   //LES BIT DE L ENCODEUR SONT A 0 POUR ENTRE
  DDRG = 0X07;   //LES BIT LED1 A 1 POUR SORTIE ET SW1 ENCODEUR A 0 POUR ENTRE
  DDRL = 0XFC;   // LES BIT LED 2 ET 3 A 1 POUR SORTIE
  DDRC = 0X01;   //LES BIT RESTE A 0 / POUR ENTRÉE RESTE A 1
  PORTC = 0XFF;  //PULL UP DES BIT 0 QUI SONT EENTRÉE
  PORTG = 0X20;  //PULL UP DU BOUTON SW1

  DDRE &= ~((1 << CHAN2) |(1 <<CHAN11));
  PORTE |=(1 << CHAN2) | (1 << CHAN11); 

  attachInterrupt(1, EncodeurInterruption, CHANGE);
}
void dessin() {
  matrix.setTextSize(1);
  matrix.setTextWrap(false);
  matrix.setCursor(9, 1);
  matrix.setTextColor(matrix.Color888(255, 255, 255));
  matrix.print("snake2.0");
}






void loop() {
  //validationLED();
  validationBTN();
  Machine_A_Etat();
  //dessin();
  Serial.print("StartEncodeur =");
  Serial.println(StartEncodeur);

  if(SensEncodeur != -1){ // si encodeur a bouger
 if (SensEncodeur == 1){ // compare si equale
 StartEncodeur++;
 }else if (SensEncodeur == 0) {
  StartEncodeur--;
 }
}
 SensEncodeur = -1; //reset pour attendre le prochain mouvement
  
}

void validationLED() {
  ctrlLD1R(1);
  delay(1000);
  ctrlLD1R(0);
  delay(1000);
  ctrlLD2B(1);
  delay(1000);
  ctrlLD2B(0);
  delay(1000);
  ctrlLD3G(1);
  delay(1000);
  ctrlLD3G(0);
}
void validationBTN() {

  ctrlLD3R(lireBTNUP());
  ctrlLD1B(lireBTNDOWN());
  ctrlLD1G(lireBTNLEFT());
  ctrlLD2R(lireBTNRIGTH());
}
  
